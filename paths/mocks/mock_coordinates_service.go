// Code generated by MockGen. DO NOT EDIT.
// Source: buf.build/gen/go/getsynq/api/grpc/go/synq/entities/coordinates/v1/coordinatesv1grpc (interfaces: DatabaseCoordinatesServiceClient)
//
// Generated by this command:
//
//	mockgen -destination=paths/mocks/mock_coordinates_service.go -package=mocks buf.build/gen/go/getsynq/api/grpc/go/synq/entities/coordinates/v1/coordinatesv1grpc DatabaseCoordinatesServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "buf.build/gen/go/getsynq/api/protocolbuffers/go/synq/entities/coordinates/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockDatabaseCoordinatesServiceClient is a mock of DatabaseCoordinatesServiceClient interface.
type MockDatabaseCoordinatesServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseCoordinatesServiceClientMockRecorder
	isgomock struct{}
}

// MockDatabaseCoordinatesServiceClientMockRecorder is the mock recorder for MockDatabaseCoordinatesServiceClient.
type MockDatabaseCoordinatesServiceClientMockRecorder struct {
	mock *MockDatabaseCoordinatesServiceClient
}

// NewMockDatabaseCoordinatesServiceClient creates a new mock instance.
func NewMockDatabaseCoordinatesServiceClient(ctrl *gomock.Controller) *MockDatabaseCoordinatesServiceClient {
	mock := &MockDatabaseCoordinatesServiceClient{ctrl: ctrl}
	mock.recorder = &MockDatabaseCoordinatesServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseCoordinatesServiceClient) EXPECT() *MockDatabaseCoordinatesServiceClientMockRecorder {
	return m.recorder
}

// BatchDatabaseCoordinates mocks base method.
func (m *MockDatabaseCoordinatesServiceClient) BatchDatabaseCoordinates(ctx context.Context, in *v1.BatchDatabaseCoordinatesRequest, opts ...grpc.CallOption) (*v1.BatchDatabaseCoordinatesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDatabaseCoordinates", varargs...)
	ret0, _ := ret[0].(*v1.BatchDatabaseCoordinatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDatabaseCoordinates indicates an expected call of BatchDatabaseCoordinates.
func (mr *MockDatabaseCoordinatesServiceClientMockRecorder) BatchDatabaseCoordinates(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDatabaseCoordinates", reflect.TypeOf((*MockDatabaseCoordinatesServiceClient)(nil).BatchDatabaseCoordinates), varargs...)
}

// BatchIdsByCoordinates mocks base method.
func (m *MockDatabaseCoordinatesServiceClient) BatchIdsByCoordinates(ctx context.Context, in *v1.BatchIdsByCoordinatesRequest, opts ...grpc.CallOption) (*v1.BatchIdsByCoordinatesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchIdsByCoordinates", varargs...)
	ret0, _ := ret[0].(*v1.BatchIdsByCoordinatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchIdsByCoordinates indicates an expected call of BatchIdsByCoordinates.
func (mr *MockDatabaseCoordinatesServiceClientMockRecorder) BatchIdsByCoordinates(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchIdsByCoordinates", reflect.TypeOf((*MockDatabaseCoordinatesServiceClient)(nil).BatchIdsByCoordinates), varargs...)
}
