// Code generated by MockGen. DO NOT EDIT.
// Source: buf.build/gen/go/getsynq/api/grpc/go/synq/entities/entities/v1/entitiesv1grpc (interfaces: EntitiesServiceClient)
//
// Generated by this command:
//
//	mockgen -destination=paths/mocks/mock_entities_service.go -package=mocks buf.build/gen/go/getsynq/api/grpc/go/synq/entities/entities/v1/entitiesv1grpc EntitiesServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "buf.build/gen/go/getsynq/api/protocolbuffers/go/synq/entities/entities/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockEntitiesServiceClient is a mock of EntitiesServiceClient interface.
type MockEntitiesServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockEntitiesServiceClientMockRecorder
	isgomock struct{}
}

// MockEntitiesServiceClientMockRecorder is the mock recorder for MockEntitiesServiceClient.
type MockEntitiesServiceClientMockRecorder struct {
	mock *MockEntitiesServiceClient
}

// NewMockEntitiesServiceClient creates a new mock instance.
func NewMockEntitiesServiceClient(ctrl *gomock.Controller) *MockEntitiesServiceClient {
	mock := &MockEntitiesServiceClient{ctrl: ctrl}
	mock.recorder = &MockEntitiesServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntitiesServiceClient) EXPECT() *MockEntitiesServiceClientMockRecorder {
	return m.recorder
}

// BatchGetEntities mocks base method.
func (m *MockEntitiesServiceClient) BatchGetEntities(ctx context.Context, in *v1.BatchGetEntitiesRequest, opts ...grpc.CallOption) (*v1.BatchGetEntitiesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetEntities", varargs...)
	ret0, _ := ret[0].(*v1.BatchGetEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEntities indicates an expected call of BatchGetEntities.
func (mr *MockEntitiesServiceClientMockRecorder) BatchGetEntities(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEntities", reflect.TypeOf((*MockEntitiesServiceClient)(nil).BatchGetEntities), varargs...)
}

// GetEntity mocks base method.
func (m *MockEntitiesServiceClient) GetEntity(ctx context.Context, in *v1.GetEntityRequest, opts ...grpc.CallOption) (*v1.GetEntityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEntity", varargs...)
	ret0, _ := ret[0].(*v1.GetEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntity indicates an expected call of GetEntity.
func (mr *MockEntitiesServiceClientMockRecorder) GetEntity(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntity", reflect.TypeOf((*MockEntitiesServiceClient)(nil).GetEntity), varargs...)
}

// ListEntities mocks base method.
func (m *MockEntitiesServiceClient) ListEntities(ctx context.Context, in *v1.ListEntitiesRequest, opts ...grpc.CallOption) (*v1.ListEntitiesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEntities", varargs...)
	ret0, _ := ret[0].(*v1.ListEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntities indicates an expected call of ListEntities.
func (mr *MockEntitiesServiceClientMockRecorder) ListEntities(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntities", reflect.TypeOf((*MockEntitiesServiceClient)(nil).ListEntities), varargs...)
}

// SearchEntities mocks base method.
func (m *MockEntitiesServiceClient) SearchEntities(ctx context.Context, in *v1.SearchEntitiesRequest, opts ...grpc.CallOption) (*v1.SearchEntitiesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchEntities", varargs...)
	ret0, _ := ret[0].(*v1.SearchEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchEntities indicates an expected call of SearchEntities.
func (mr *MockEntitiesServiceClientMockRecorder) SearchEntities(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchEntities", reflect.TypeOf((*MockEntitiesServiceClient)(nil).SearchEntities), varargs...)
}
